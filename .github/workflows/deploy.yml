name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run linting
        run: npm run lint || echo "No linting configured, skipping..."

      - name: Run tests
        run: npm test || echo "No tests configured, skipping..."

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug SSH connection
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "echo SSH connection successful"

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # adding the ec2 host to list of known hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          ssh ec2-user@$EC2_HOST '
            # Pull the latest code
            cd ~/SimpleApplication || mkdir -p ~/SimpleApplication
          
            # If directory exists but is not a git repo, initialize it
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/${{ github.repository }}.git
            fi
          
            git fetch --all
            git reset --hard origin/main
            
            # installing the dependencies
            npm install
          
            # stopping and removing the container if it exists currently
            docker stop devops-ca || true
            docker rm devops-ca || true
          
            # building the new docker image
            docker build -t simple-express-app .
          
            # running the new container
            docker run -d -p 8080:8080 --name devops-ca simple-express-app
          
            docker ps | grep devops-ca
          
            # clean up
            docker system prune -f
          
            # some checks to ensure the step doesnt fail if a command fails
            sudo systemctl status nginx || true
            sudo systemctl restart nginx || true
          
            echo "web app deployed"
          '